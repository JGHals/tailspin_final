You are an expert in TypeScript, Next.js App Router, React, and Tailwind. Follow @Next.js 14 App Router docs for Data Fetching, Rendering, and Routing. Use Vercel AI SDK for handling AI interactions and streaming responses.

Always review the codebase before ANY change. Check for existing functinality. Check for interoperability. Know if your proposed change will fundamentally change the app and notify user if it will before making change. 

- All project files are saved in the /src folder. 
  - src/app has the page.tsx and layout.tsx files
  - src/app/api has the API routes
  - src/app/components has all the React components
  - src/app/lib has all the other code like helpers, hooks, and contexts

There are some pre-configured APIs in this template that can be used but only if required by the current project. These have already been created:
- Firebase
  - In src/lib/firebase there is a firebase.ts configuration file as well as firebaseUtils.ts for various utility functions when interacting with Firebase Database, Storage, and Authencation
  - In src/lib/contexts there is an AuthContext.tsx file that has user authentication with Firebase set up with the onAuthStateChanged listener.
  - In src/lib/hooks there is a useAuth.ts hook
- OpenAI 
  - src/app/api/openai has chat/route.ts which is a simple API calling streamText from openai using the Vercel AI library
- Anthropic
  - src/app/api/anthropic has chat/route.ts which is a simple API calling streamText from Anthropic using the Vercel AI library
- Replicate
  - src/app/api/replicate has generate-image/route.ts which is a simple API calling the Stable Diffusion model hosted on Replicate to generate images
- Deepgram
  - src/app/api/deepgram has transcribe-audio/route.ts which is a simple API that returns the Deepgram API key to be used in the client side to transcribe audio in real-time.
  - src/lib/contexts has a DeepgramContext.tsx file that has the Deepgram API key set up with the useDeepgram hook to be used in any component.

  # ⚙️ Cursor Coding Rules for TailSpin (Best Practices)

This file provides enforced rules and practices to help Cursor write clean, non-redundant, and maintainable code for the TailSpin project.

---

## ✅ General Coding Guidelines

### 1. **Avoid Redundancy**

* Don’t repeat logic already present in shared functions or utilities 
* Use helper functions whenever possible

### 2. **Respect File Responsibilities**

* Keep business logic in `lib/`
* Keep API request handlers in `pages/api/`
* Keep component state and layout in `components/` and `pages/`

### 3. **Don't Modify UI Without Prompt**

* Do not change any JSX or Tailwind styling unless specifically asked.
* Avoid inserting handlers or logic directly into UI files—call imported functions instead.

### 4. **Follow Functional Boundaries**

| Folder        | Responsibility                            |
| ------------- | ----------------------------------------- |
| `lib/`        | Dictionary, validation, scoring, powerups |
| `api/`        | Route handlers and backend logic          |
| `components/` | Reusable React components and views       |
| `pages/`      | Top-level routes and layout               |

---

## 🧼 Code Quality Rules

### 5. **Use Pure Functions Where Possible**

* Avoid side effects in helpers
* Make scoring, validation, and analysis deterministic

### 6. **Keep Functions Small**

* Break logic into clearly named helper functions if it exceeds \~30 lines
* Each function should do one thing well

### 7. **Type Everything (TypeScript)**

* Always use interfaces or types for:

  * Game session state
  * Validation results
  * Scoring summaries

---

## 🔁 Safe Integration with Existing Code

### 8. **Don’t Overwrite**

* Never overwrite existing logic without explanation
* If updating a function, wrap new logic in `if/else` blocks with fallback

### 9. **Guard Against Undefined**

* Always check `undefined` values before using `.length`, `.map`, or accessors
* Use nullish coalescing (`??`) and optional chaining (`?.`) carefully

---

## 🔍 Naming & Structure

### 10. **Consistent Naming**

| Concept         | Naming Convention        |
| --------------- | ------------------------ |
| Word Validator  | `validateWordChain()`    |
| Dictionary Load | `loadDictionary()`       |
| Game Result     | `GameResult` (interface) |
| Chain Score     | `calculateScore()`       |

### 11. **Use Folder Naming to Your Advantage**

* Prefer `lib/validation.ts` to hold all rule logic
* Use `lib/scoring.ts` for all point calculation

---

## 💬 Prompt Cursor with Clear Instructions

When editing or generating code:

```ts
// Only modify the logic below
// Use validateWord and calculateScore from lib
```

Or

```text
Don’t touch JSX. Only add a handler using the imported validator.
```

---

## 🚨 Anti-Patterns to Avoid

* Logic duplication across routes and lib
* Putting validation logic inside `pages/index.tsx`
* Relying on `any` instead of explicit types
* Skipping dictionary existence check before chaining logic

---

## 🧩 TailSpin-Specific Helpers to Prefer

* `isValidWord(word)` from `lib/dictionary.ts`
* `followsChainRule(prev, next)` from `lib/validation.ts`
* `isTerminalWord(word)` from `lib/validation.ts`
* `calculateScore(chain)` from `lib/scoring.ts`

---

> Use this file as a coding ruleset when building with Cursor.
> All logic should remain modular, testable, and safely extendable.